<?xml version="1.0" encoding="UTF-8"?>
<scxml
    initial="idle"
    version="1.0"
    name="MoveBlock"
    model_src=""
    xmlns="http://www.w3.org/2005/07/scxml">

    <bt_declare_port_in key="block_id" type="int32" />

    <!-- MoveBlock is a client for the MoveBlockSkill -->
    <ros_action_client name="MoveBlock_action" action_name="/uc2/skills/move_block" type="uc2_interfaces/MoveBlock" />

    <datamodel>
        <data id="skillResponse" expr="false" type="bool" />
        <!-- This skill does not need to provide any measurable result, only success/failure -->
        <!-- Alternatively, a result could be placement_error (float32) within acceptable bound -->
    </datamodel>

    <state id="idle">
        <!-- If ticked, start the MoveBlockSkill -->
        <bt_tick target="startSkill" />
        <!-- If halted, do nothing-->
        <!-- Do we expect a BT return from a halt request? -->
        <!--<bt_halt target="idle" />-->
    </state>

    <state id="startSkill">
        <!-- Send an asynchronous request and answer RUNNING to the BT -->
        <onentry>
            <ros_action_send_goal name="MoveBlock_action">
                <field name="block_id">
                  <expr>
                    <bt_get_input key="block_id" />
                  </expr>
                </field>
            </ros_action_send_goal>
        </onentry>
        <transition target="waitAccept" />
    </state>

    <state id="waitAccept">
        <onentry>
            <bt_return_status status="RUNNING" />
        </onentry>
        <bt_tick target="waitAccept" />
        <ros_action_handle_goal_response name="MoveBlock_action" accept="running" reject="startSkill" />
    </state>

    <state id="running">
        <!-- If the MoveBlock_action returns, go to answer state-->
        <ros_action_handle_success_result name="MoveBlock_action" target="answer">
            <assign location="skillResponse" expr="true" />
        </ros_action_handle_success_result>
        <!--<ros_action_handle_canceled_result name="MoveBlock_action" target="answer">
            <assign location="skillResponse" expr="false" /> ???
        </ros_action_handle_canceled_result>-->
        <ros_action_handle_aborted_result name="MoveBlock_action" target="answer">
            <assign location="skillResponse" expr="false" />
        </ros_action_handle_aborted_result>

        <!-- If ticked, just answer RUNNING and stay in this state -->
        <bt_tick target="running">
            <bt_return_status status="RUNNING" />
        </bt_tick>
        <!-- If halted, send stop request to skill and go to idle state -->
        <!--<bt_halt target="idle">
            <ros_service_send_request service_name="/BatteryDrainerSkill/stop" /> FIXME
        </bt_halt>-->
    </state>

    <state id="answer">
        <!-- If halted, return to the idle state -->
        <!--<bt_halt target="idle" />-->
        <!-- If ticked, send back an answer to the BT and go to idle state -->
        <bt_tick target="idle">
            <if cond="skillResponse == true">
                <bt_return_status status="SUCCESS" />
                <else />
                <bt_return_status status="FAILURE" />
            </if>
        </bt_tick>
    </state>
</scxml>
