<?xml version="1.0" encoding="UTF-8"?>
<scxml
    initial="idle"
    version="1.0"
    name="MoveBlockSkill"
    model_src=""
    xmlns="http://www.w3.org/2005/07/scxml">

    <!-- server part of MoveBlockSkill -->
    <ros_action_server name="MoveBlock_action_srv" action_name="/uc2/skills/move_block" type="uc2_interfaces/MoveBlock" />
    <!-- service server regarding block_down information -->
    <ros_service_server name="get_block_status_srv" service_name="/uc2/world/get_block_status" type="uc2_interfaces/GetBlockStatus" />
    <ros_service_server name="reset_block_status_srv" service_name="/uc2/world/reset_block_status" type="std_srvs/Empty" />

    <!-- listen time info and publish abort_time info -->
    <ros_topic_subscriber name="clock_sub" topic="clock" type="builtin_interfaces/Time" />
    <ros_topic_publisher name="moveblock_abort_time_pub" topic="/uc2/info/properties/move_block_abort_time" type="builtin_interfaces/Time" />

    <datamodel>
        <!-- world info -->
        <data id="block_down" type="int32" expr="0" />
        <!-- Variables for action management -->
        <data id="block_id" type="int32" expr="0" />
        <data id="goal_id" type="int32" expr="0" />
        <!-- global time info -->
        <data id="time_sec" type="int32" expr="0" />
        <data id="time_nsec" type="int32" expr="0" />
        <data id="attempt_count" type="int32" expr="0" />
    </datamodel>

    <state id="idle">
        <!-- listen for time -->
        <ros_topic_callback name="clock_sub" target="idle">
            <assign location="time_sec" expr="_msg.sec" />
            <assign location="time_nsec" expr="_msg.nanosec" />
        </ros_topic_callback>
        <!-- If action server is called ... -->
        <ros_action_handle_goal name="MoveBlock_action_srv" target="process_block">
            <assign location="goal_id" expr="_action.goal_id" />
            <assign location="block_id" expr="_goal.block_id" />
            <!-- accept goal -->
            <ros_action_accept_goal name="MoveBlock_action_srv" goal_id="goal_id" />
        </ros_action_handle_goal>
        <!-- If service server get_block_status_srv is called ... -->
        <ros_service_handle_request name="get_block_status_srv" target="idle">
            <ros_service_send_response name="get_block_status_srv">
                <field name="block_down" expr="block_down" />
            </ros_service_send_response>
        </ros_service_handle_request>
        <!-- If service server reset_block_status_srv is called ... -->
        <ros_service_handle_request name="reset_block_status_srv" target="idle">
            <assign location="block_down" expr="0" />
            <ros_service_send_response name="reset_block_status_srv">
            </ros_service_send_response>
        </ros_service_handle_request>
    </state>

    <state id="process_block">
        <onentry>
            <assign location="attempt_count" expr="attempt_count + 1" />
        </onentry>
        <transition>
            <target id="idle" prob="0.7">
                <!-- success -->
                <assign location="block_down" expr="0" />
                <ros_action_succeed name="MoveBlock_action_srv" goal_id="goal_id" />
            </target>
            <target id="idle" prob="0.3">
                <!-- else abort (if n attempts l.t. 3) -->
                <if cond="attempt_count &lt; 3">
                    <assign location="block_down" expr="1" />
                    <!-- publish abort time -->
                    <ros_topic_publish name="moveblock_abort_time_pub">
                        <field name="sec" expr="time_sec" />
                        <field name="nanosec" expr="time_nsec" />
                    </ros_topic_publish>
                    <ros_action_aborted name="MoveBlock_action_srv" goal_id="goal_id" />
                <else/>
                    <!-- after 3 attempts, make sure to succeed -->
                    <assign location="block_down" expr="0" />
                    <ros_action_succeed name="MoveBlock_action_srv" goal_id="goal_id" />
                </if>
            </target>
        </transition>
    </state>
</scxml>
