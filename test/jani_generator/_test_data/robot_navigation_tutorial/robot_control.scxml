<?xml version="1.0" encoding="UTF-8"?>
<scxml
    initial="current"
    version="1.0"
    name="RobotController"
    model_src=""
    xmlns="http://www.w3.org/2005/07/scxml">

    <datamodel>
        <!-- The robot pose in the world frame  -->
        <data id="tf_world_robot_x" expr="0.0" type="float32" />
        <data id="tf_world_robot_y" expr="0.0" type="float32" />
        <data id="tf_world_robot_theta" expr="0.0" type="float32" />
        <!-- The world origin in the robot frame (inverse of prev. tf) -->
        <data id="tf_robot_world_x" expr="0.0" type="float32" />
        <data id="tf_robot_world_y" expr="0.0" type="float32" />
        <data id="tf_robot_world_theta" expr="0.0" type="float32" />
        <!-- The goal pose in the world frame -->
        <data id="goal_x_world" expr="5.0" type="float32" />
        <data id="goal_y_world" expr="-2.0" type="float32" />
        <!-- The goal pose in the robot frame -->
        <data id="goal_x_robot" expr="0.0" type="float32" />
        <data id="goal_y_robot" expr="0.0" type="float32" />
    </datamodel>

    <ros_topic_subscriber name="pose" topic="/robot_pose" type="geometry_msgs/Pose2D" />
    <ros_topic_publisher name="cmd_vel" topic="/cmd_vel" type="geometry_msgs/Twist" />
    <ros_time_rate name="control_timer" rate_hz="1.0" />

    <state id="current">
        <ros_topic_callback name="pose" target="current">
            <assign location="tf_world_robot_x" expr="_msg.x" />
            <assign location="tf_world_robot_y" expr="_msg.y" />
            <assign location="tf_world_robot_theta" expr="_msg.theta" />
            <assign location="tf_robot_world_theta" expr="-tf_world_robot_theta" />
            <!-- (tf_rob_w_x,  tf_rob_w_y)^T = R(tf_rob_w_theta) * (-(tf_w_rob_x, tf_w_rob_y)^T) -->
            <assign location="tf_robot_world_x"
                    expr="(-tf_world_robot_x * Math.cos(tf_robot_world_theta)) + (tf_world_robot_y * Math.sin(tf_robot_world_theta))" />
            <assign location="tf_robot_world_y"
                    expr="(-tf_world_robot_x * Math.sin(tf_robot_world_theta)) + (-tf_world_robot_y * Math.cos(tf_robot_world_theta))" />
            <!-- g_robot = tf_robot_world * g_world -->
            <assign location="goal_x_robot"
                    expr="goal_x_world * Math.cos(tf_robot_world_theta) - goal_y_world * Math.sin(tf_robot_world_theta) + tf_robot_world_x" />
            <assign location="goal_y_robot"
                    expr="goal_x_world * Math.sin(tf_robot_world_theta) + goal_y_world * Math.cos(tf_robot_world_theta) + tf_robot_world_y" />
        </ros_topic_callback>
        <ros_rate_callback name="control_timer" target="current">
            <!-- We do not have atan2, make the control law very basic -->
            <!-- Control law: v = 0.5 * goal_x_robot, w = 0.5 * goal_y_robot -->
            <ros_topic_publish name="cmd_vel">
                <!-- We have only sin / cos, no atan. Make simpler approach -->
                <field name="linear.x" expr="0.1 * goal_x_robot" />
                <field name="angular.z" expr="0.1 * goal_y_robot" />
                <!-- Additional fields are set to 0 -->
                <field name="linear.y" expr="0.0" />
                <field name="linear.z" expr="0.0" />
                <field name="angular.x" expr="0.0" />
                <field name="angular.y" expr="0.0" />
            </ros_topic_publish>
        </ros_rate_callback>
    </state>
</scxml>
