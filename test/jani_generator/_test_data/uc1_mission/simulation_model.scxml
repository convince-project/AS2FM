<?xml version="1.0" encoding="UTF-8"?>
<scxml
    initial="init"
    version="1.0"
    name="SimulationModel"
    model_src=""
    xmlns="http://www.w3.org/2005/07/scxml">

    <!--
        In this model the following applies:
        - The robot starts in the dock
        - The robot can start cleaning only after undocking
        - The robot can dock only when it is in the undocked location
        - Cleaning will not increase in case an anomaly is raised and not handled
    -->

    <datamodel>
        <!-- 0 = Docked -->
        <!-- 1 = Undocked -->
        <!-- 2 = CleaningArea -->
        <data id="current_location" expr="0" type="int16" />
        <data id="clean_percentage" type="int16" expr="0" />
        <data id="is_stuck" type="bool" expr="false" />
    </datamodel>

    <ros_action_server name="navigation_action" action_name="/navigate_to_loc" type="uc1_interfaces/Navigate" />
    <ros_action_server name="coverage_action" action_name="/do_coverage" type="uc1_interfaces/Coverage" />
    <ros_action_server name="dock_action" action_name="/perform_docking" type="uc1_interfaces/PerformDocking" />
    <ros_action_server name="undock_action" action_name="/perform_undocking" type="uc1_interfaces/PerformUndocking" />
    <ros_action_server name="unstuck_action" action_name="/perform_unstucking" type="uc1_interfaces/PerformUnstucking" />

    <ros_topic_publisher name="current_coverage" topic="/coverage_percentage" type="std_msgs/Int16" />
    <ros_topic_publisher name="stuck_info" topic="/stuck_info" type="uc1_interfaces/StuckInfo" />

    <state id="init">
        <transition target="running">
            <assign location="current_location" expr="0" />
            <assign location="clean_percentage" expr="0" />
            <assign location="is_stuck" expr="false" />
        </transition>
    </state>

    <state id="running">
        <!-- Undocking requests -->
        <transition event="undock_req" condition="current_location == 0" target="valid_undock_req" />
        <transition event="undock_req" target="invalid_undock_req" />
        <!-- Docking requests -->
        <!-- Navigate requests -->
        <!-- Coverage requests -->
        <!-- Unstuck requests -->

    </state>

    <!-- Invalid undock request -->
    <state id="invalid_undock_req">
        <transition target="running">
            <send event="undock_res">
                <param name="accept" expr="false" />
            </send>
        </transition>
    </state>

    <!-- Valid undock request -->
    <state id="valid_undock_req">
        <onentry>
            <assign location="undock_count" expr="undock_count + 1" />
        </onentry>
        <transition>
            <target id="running" prob="0.8">
                <!-- Success -->
                <assign location="current_location" expr="1" />
                <send event="undock_res">
                    <param name="accept" expr="true" />
                    <param name="success" expr="true" />
                </send>
            </target>
            <target id="running" prob="0.2">
                <if cond="undock_count &gt; 3">
                    <!-- Success -->
                    <assign location="current_location" expr="1" />
                    <send event="undock_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="true" />
                    </send>
                <else/>
                    <!-- Failure -->
                    <send event="undock_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="false" />
                    </send>
                </if>
            </target>
        </transition>
    </state>

</scxml>
