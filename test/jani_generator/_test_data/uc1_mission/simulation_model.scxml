<?xml version="1.0" encoding="UTF-8"?>
<scxml
    initial="init"
    version="1.0"
    name="SimulationModel"
    model_src=""
    xmlns="http://www.w3.org/2005/07/scxml">

    <!--
        In this model the following applies:
        - The robot starts in the dock
        - The robot can start cleaning only after undocking
        - The robot can dock only when it is in the undocked location
        - Cleaning will not increase in case an anomaly is raised and not handled
    -->

    <datamodel>
        <!-- 0 = Docked -->
        <!-- 1 = Undocked -->
        <!-- 2 = CleaningArea -->
        <data id="current_location" expr="0" type="int16" />
        <data id="clean_percentage" type="int16" expr="0" />
        <data id="is_stuck" type="bool" expr="false" />
        <!-- Additional failure counter variables -->
        <data id="undock_count" expr="0" type="int16" />
        <data id="dock_count" expr="0" type="int16" />
        <data id="nav_count" expr="0" type="int16" />
        <!-- Additional settings from skill nodes -->
        <data id="goal_location" expr="0" type="int16" />
    </datamodel>

    <ros_topic_publisher name="current_coverage" topic="/coverage_percentage" type="std_msgs/Int16" />
    <ros_topic_publisher name="stuck_info" topic="/stuck_info" type="uc1_interfaces/StuckInfo" />

    <state id="init">
        <transition target="running">
            <assign location="current_location" expr="0" />
            <assign location="clean_percentage" expr="0" />
            <assign location="is_stuck" expr="false" />
        </transition>
    </state>

    <!-- ====== Requests orchestration ====== -->
    <state id="running">
        <!-- Undocking requests -->
        <transition event="undock_req" condition="current_location == 0" target="valid_undock_req" />
        <transition event="undock_req" target="invalid_undock_req" />
        <!-- Docking requests -->
        <transition event="dock_req" condition="current_location == 1" target="valid_dock_req" />
        <transition event="dock_req" target="invalid_dock_req" />
        <!-- Navigate requests -->
        <transition event="nav_req" condition="current_location != 0" target="valid_nav_req">
            <assign location="goal_location" expr="_event.data.goal_location" />
        </transition>
        <transition event="nav_req" target="invalid_nav_req" />
        <!-- Coverage requests -->
        <!-- Unstuck requests -->

    </state>

    <!-- ====== Undocking ====== -->
    <state id="invalid_undock_req">
        <transition target="running">
            <send event="undock_res">
                <param name="accept" expr="false" />
            </send>
        </transition>
    </state>

    <state id="valid_undock_req">
        <onentry>
            <assign location="undock_count" expr="undock_count + 1" />
        </onentry>
        <transition>
            <target id="running" prob="0.8">
                <!-- Success -->
                <assign location="current_location" expr="1" />
                <assign location="undock_count" expr="0" />
                <send event="undock_res">
                    <param name="accept" expr="true" />
                    <param name="success" expr="true" />
                </send>
            </target>
            <target id="running" prob="0.2">
                <if cond="undock_count &gt; 3">
                    <!-- Success -->
                    <assign location="current_location" expr="1" />
                    <assign location="undock_count" expr="0" />
                    <send event="undock_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="true" />
                    </send>
                <else/>
                    <!-- Failure -->
                    <send event="undock_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="false" />
                    </send>
                </if>
            </target>
        </transition>
    </state>

    <!-- ====== Docking ====== -->
    <state id="invalid_dock_req">
        <transition target="running">
            <send event="dock_res">
                <param name="accept" expr="false" />
            </send>
        </transition>
    </state>

    <state id="valid_dock_req">
        <onentry>
            <assign location="dock_count" expr="dock_count + 1" />
        </onentry>
        <transition>
            <target id="running" prob="0.8">
                <!-- Success -->
                <assign location="current_location" expr="0" />
                <assign location="dock_count" expr="0" />
                <send event="dock_res">
                    <param name="accept" expr="true" />
                    <param name="success" expr="true" />
                </send>
            </target>
            <target id="running" prob="0.2">
                <if cond="dock_count &gt; 3">
                    <!-- Success -->
                    <assign location="current_location" expr="1" />
                    <assign location="dock_count" expr="0" />
                    <send event="dock_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="true" />
                    </send>
                <else/>
                    <!-- Failure -->
                    <send event="dock_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="false" />
                    </send>
                </if>
            </target>
        </transition>
    </state>

    <!-- ====== Navigation ====== -->
    <state id="invalid_nav_req">
        <transition target="running">
            <send event="nav_res">
                <param name="accept" expr="false" />
            </send>
        </transition>
    </state>

    <state id="valid_nav_req">
        <onentry>
            <assign location="nav_count" expr="nav_count + 1" />
        </onentry>
        <transition>
            <target id="running" prob="0.8">
                <!-- Success if not stuck -->
                <if cond="!is_stuck">
                    <assign location="current_location" expr="goal_location" />
                    <assign location="nav_count" expr="0" />
                </if>
                <send event="nav_res">
                    <param name="accept" expr="true" />
                    <param name="success" expr="!is_stuck" />
                </send>
            </target>
            <target id="running" prob="0.2">
                <if cond="!is_stuck &amp;&amp; (current_location == goal_location || nav_count &gt; 3)">
                    <!-- Success -->
                    <assign location="current_location" expr="goal_location" />
                    <assign location="nav_count" expr="0" />
                    <send event="nav_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="true" />
                    </send>
                <else/>
                    <!-- Failure -->
                    <assign location="is_stuck" expr="true" />
                    <send event="nav_res">
                        <param name="accept" expr="true" />
                        <param name="success" expr="false" />
                    </send>
                </if>
            </target>
        </transition>
    </state>

</scxml>
