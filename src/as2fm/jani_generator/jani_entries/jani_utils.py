# Copyright (c) 2024 - for information on the respective copyright owner
# see the NOTICE file

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Collection of various utilities for Jani entries."""

from typing import Tuple, Type, get_args

from as2fm.as2fm_common.common import ValidJaniTypes, get_default_expression_for_type, is_array_type
from as2fm.jani_generator.jani_entries import JaniExpression, JaniVariable
from as2fm.jani_generator.jani_entries.jani_expression_generator import array_create_operator


def is_expression_array(expr: JaniExpression) -> bool:
    """Determine is an expression is an array operator ('av' or 'ac')."""
    exp_operator, _ = expr.as_operator()
    return exp_operator is not None and exp_operator in ("ac", "av")


def is_variable_array(variable: JaniVariable) -> bool:
    """
    Check if a variable is an array.

    :param variable: The instance of the variable to check.
    :return: True if the variable is an array, False otherwise.
    """
    return is_array_type(variable.get_type())


def get_expression_array_length(expr: JaniExpression) -> int:
    """Get the length of the array generated by the provided expression."""
    assert is_expression_array(expr), f"The input expression {expr} is not an array ('ac', 'av')."
    operator, operands = expr.as_operator()
    if operator == "ac":
        return operands["length"].as_literal().value()
    return len(operands["elements"].as_literal().value())


def get_array_variable_info(jani_var: JaniVariable) -> Tuple[Type, int]:
    """Extract the array type and max size from a jani variable."""
    var_type = jani_var.get_type()
    assert is_array_type(var_type), f"Input JANI variable {jani_var.name()} is not an array."
    array_type = get_args(var_type)[0]
    assert array_type in (
        int,
        float,
    ), f"Unsupported array type {array_type} found in JANI variable {jani_var.name()}."
    max_size = get_expression_array_length(jani_var.get_init_expr())
    return (array_type, max_size)


def generate_jani_variable(var_name: str, var_type: Type[ValidJaniTypes], array_size: int):
    """Helper to make a JaniVariable object."""
    # TODO: Move it to jani_utils.py
    if is_array_type(var_type):
        array_type = get_args(var_type)[0]
        init_value = array_create_operator("__array_iterator", array_size, array_type(0))
    else:
        init_value = JaniExpression(get_default_expression_for_type(var_type))
    return JaniVariable(var_name, var_type, init_value)
