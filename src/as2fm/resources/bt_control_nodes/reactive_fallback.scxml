<?xml version="1.0" encoding="UTF-8"?>
<scxml
    xmlns="http://www.w3.org/2005/07/scxml"
    initial="init"
    version="1.0"
    name="ReactiveFallback"
    model_src="https://raw.githubusercontent.com/BehaviorTree/BehaviorTree.CPP/refs/heads/v3.8/src/controls/reactive_fallback.cpp">

    <!-- A default BT port reporting the amount of children -->
    <bt_declare_port_in key="CHILDREN_COUNT" type="int8" />

    <datamodel>
        <data id="failure_count" type="int8" expr="0" />
        <data id="child_idx" type="int8" expr="0" />
        <data id="children_count" type="int8">
            <expr>
                <bt_get_input key="CHILDREN_COUNT" />
            </expr>
        </data>
    </datamodel>

    <state id="init">
        <!-- Check if the config is valid. If not, go to error and stop -->
        <transition target="error" cond="children_count &lt; 1" />
        <!-- The condition here will be the negation of the one above -->
        <transition target="wait_for_tick" />
    </state>

    <state id="wait_for_tick">
        <!-- React to an incoming BT Tick -->
        <bt_tick target="tick_children">
            <assign location="failure_count" expr="0" />
            <assign location="child_idx" expr="0" />
        </bt_tick>
    </state>

    <state id="tick_children">
        <onentry>
            <if cond="child_idx &lt; children_count">
                <bt_tick_child id="child_idx"/>
            </if>
        </onentry>
        <bt_child_status id="child_idx" cond="_bt.status == RUNNING" target="wait_for_tick">
            <bt_return_status status="RUNNING" />
        </bt_child_status>
        <bt_child_status id="child_idx" cond="_bt.status == FAILURE" target="tick_children">
            <assign location="failure_count" expr="failure_count + 1" />
            <assign location="child_idx" expr="child_idx + 1" />
        </bt_child_status>
        <bt_child_status id="child_idx" cond="_bt.status == SUCCESS" target="wait_for_tick">
            <bt_return_status status="SUCCESS" />
        </bt_child_status>
        <!-- Exit conditions -->
        <!-- All children returned success -->
        <transition target="wait_for_tick" cond="failure_count == children_count">
            <bt_return_status status="FAILURE" />
        </transition>
        <!-- We looped over all children, but not enough failures (will never happen) -->
        <transition target="wait_for_tick" cond="child_idx == children_count">
            <bt_return_status status="RUNNING" />
        </transition>
        <!-- The child_idx is out of bounds -->
        <transition target="error" cond="child_idx &lt; 0 || child_idx > children_count" />
    </state>

    <!-- A state to transition to when something did not work -->
    <state id="error" />

</scxml>
