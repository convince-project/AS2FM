<?xml version="1.0" encoding="UTF-8"?>
<scxml
    xmlns="http://www.w3.org/2005/07/scxml"
    initial="init"
    version="1.0"
    name="IfThenElse"
    model_src="https://raw.githubusercontent.com/BehaviorTree/BehaviorTree.CPP/refs/heads/v3.8/src/controls/if_then_else_node.cpp">

    <!-- A default BT port reporting the amount of children -->
    <bt_declare_port_in key="CHILDREN_COUNT" type="int8" />

    <datamodel>
        <data id="child_idx" type="int8" expr="0" />
        <data id="children_count" type="int8">
            <expr>
                <bt_get_input key="CHILDREN_COUNT" />
            </expr>
        </data>
    </datamodel>

    <state id="init">
        <!-- Check if the config is valid. If not, go to error and stop -->
        <transition target="error" cond="children_count &lt; 2 || children_count > 3" />
        <!-- The condition here will be the negation of the one above -->
        <transition target="wait_for_tick" />
    </state>

    <state id="wait_for_tick">
        <!-- React to an incoming BT Tick -->
        <bt_tick cond="child_idx == 0" target="tick_condition_child" />
        <bt_tick cond="child_idx > 0" target="tick_exec_child" />
    </state>

    <state id="tick_condition_child">
        <onentry>
            <bt_tick_child id="0"/>
        </onentry>
        <transition target="error" cond="child_idx != 0" />
        <bt_child_status id="0" cond="_bt.status == SUCCESS" target="tick_exec_child">
            <assign location="child_idx" expr="1" />
        </bt_child_status>
        <bt_child_status id="0" cond="_bt.status == FAILURE &amp;&amp; children_count == 3" target="tick_exec_child">
            <assign location="child_idx" expr="2" />
        </bt_child_status>
        <bt_child_status id="0" cond="_bt.status == FAILURE &amp;&amp; children_count &lt; 3" target="wait_for_tick">
            <bt_return_status status="FAILURE" />
        </bt_child_status>
        <bt_child_status id="0" cond="_bt.status == RUNNING" target="wait_for_tick">
            <bt_return_status status="RUNNING" />
        </bt_child_status>
    </state>

    <state id="tick_exec_child">
        <onentry>
            <bt_tick_child id="child_idx"/>
        </onentry>
        <transition target="error" cond="child_idx != 1 &amp;&amp; child_idx != 2" />
        <transition target="error" cond="child_idx >= children_count" />
        <bt_child_status id="child_idx" cond="_bt.status == SUCCESS" target="wait_for_tick">
            <assign location="child_idx" expr="0" />
            <bt_return_status status="SUCCESS" />
        </bt_child_status>
        <bt_child_status id="child_idx" cond="_bt.status == FAILURE" target="wait_for_tick">
            <assign location="child_idx" expr="0" />
            <bt_return_status status="FAILURE" />
        </bt_child_status>
        <bt_child_status id="child_idx" cond="_bt.status == RUNNING" target="wait_for_tick">
            <bt_return_status status="RUNNING" />
        </bt_child_status>
    </state>

    <!-- A state to transition to when something did not work -->
    <state id="error" />

</scxml>
